# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# NOTE: must set "Crossbow" as name to have the badge links working in the
# github comment reports!
name: Crossbow
on:
  push:
    branches:
      - "*-github-*"


jobs:
  r-versions:
    name: "rstudio/r-base:latest-focal"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      NOT_CRAN: TRUE
      R_ORG: "rstudio"
      R_IMAGE: "r-base"
      R_TAG: "latest-focal"
      ARROW_R_DEV: "TRUE"
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: assignUser/arrow
          ref: ARROW-16605-Fix-revdep-Crossbow-job
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          cache: 'pip'
          python-version: 3.8
      - name: Install Archery
        shell: bash
        run: |
          pip install -e arrow/dev/archery[all]
          pip install awscli
      - name: Fetch cached revdep volume
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          BUCKET: "s3://${{ secrets.SCCACHE_BUCKET }}/revdep"
        shell: bash
        run: |
          if [[ $(aws s3 ls $BUCKET/revdep2.tar.gz | wc -l) > 0 ]]; then
            echo "Restoring revdep volume."
            aws s3 cp $BUCKET/revdep.tar.gz revdep.tar.gz --no-progress
            tar -pzxf revdep.tar.gz -C arrow/r
          fi         
          if [[ $(aws s3 ls $BUCKET/crancache.tar.gz | wc -l) > 0 ]]; then
            echo "Restoring crancache."
            aws s3 cp $BUCKET/crancache.tar.gz crancache.tar.gz --no-progress
            tar -pzxf crancache.tar.gz -C arrow/
          fi     
          ls arrow/r
          ls arrow
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Run
        shell: bash
        run: archery docker run r-revdepcheck
      - name: Cache revdep volume
        if: always()
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          BUCKET: "s3://${{ secrets.SCCACHE_BUCKET }}/revdep"
        shell: bash
        run: |
            ls arrow/r/revdep
            ls arrow/r/.crancache
            echo "Caching revdep volume."
            tar -pzcf revdep2.tar.gz arrow/r/revdep
            aws s3 cp revdep2.tar.gz ${BUCKET}/revdep2.tar.gz --no-progress 
            echo "Caching crancache."
            tar -pzcf crancache.tar.gz arrow/.crancache
            aws s3 cp crancache.tar.gz ${BUCKET}/crancache.tar.gz --no-progress  
      - name: revdepcheck CRAN report
        if: always()
        shell: bash
        run: cat ./revdep/cran.md
      - name: revdepcheck failures
        if: always()
        shell: bash
        run: cat ./revdep/failures.md
      - name: revdepcheck problems
        if: always()
        shell: bash
        run: cat ./revdep/problems.md
      - name: Save the revdep output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: revdepcheck-folder
          path: ./revdep
      - name: Docker Push
        if: success()
        continue-on-error: true
        run: archery docker push r-revdepcheck

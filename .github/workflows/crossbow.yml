# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# This allows us to set a custom version via param:
# crossbow submit --param custom_version=8.5.3 r-nightly-packages
# if the param is unset defaults to the usual Ymd naming scheme
# We need this as boolean and string
# use filter to cast to string and convert to lowercase to match yaml boolean


# NOTE: must set "Crossbow" as name to have the badge links working in the
# github comment reports!
name: Crossbow
on:
  push:
    branches:
      - "*-github-*"


jobs:
  source:
    # This job will change the version to either the custom_version param or YMD format.
    # The output allows other steps to use the exact version to prevent issues (e.g. date changes during run)
    name: Source Package
    runs-on: ["self-hosted", "X64", "Linux"]
    outputs:
      pkg_version: ${{ steps.save-version.outputs.pkg_version }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: assignUser/arrow
          ref: c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b
          submodules: recursive

      - name: Modify version
        shell: bash
        run: |
          cd arrow/r
          sed -i.bak -E -e \
            's/(^Version: )([0-9]+\.[0-9]+\.[0-9]+).*$/\1\2.'"$(date +%Y%m%d)"'/' \
            DESCRIPTION
          head DESCRIPTION
          rm -f DESCRIPTION.bak
          cp ../dev/tasks/homebrew-formulae/autobrew/apache-arrow.rb tools/apache-arrow.rb
          
          # Pin the git commit in the formula to match
          cd tools
          if [ "true" == "true" ]; then 
            sed -i.bak -E -e 's/apache\/arrow.git"$/assignUser\/arrow.git", :revision => "'"c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b"'"/' apache-arrow.rb
          else
            sed -i.bak -E -e 's/arrow.git"$/arrow.git", :revision => "'"c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b"'"/' apache-arrow.rb
          fi
          rm -f apache-arrow.rb.bak

      - name: Save Version
        id: save-version
        shell: bash
        run: | 
          echo "::set-output name=pkg_version::$(grep ^Version arrow/r/DESCRIPTION | sed s/Version:\ //)"

      - uses: r-lib/actions/setup-r@v2
        with:
          install-r: false

      - name: Build R source package
        shell: bash
        run: |
          cd arrow/r
          # Copy in the Arrow C++ source
          make sync-cpp
          R CMD build --no-build-vignettes .

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-pkg__src__contrib
          path: arrow/r/arrow_*.tar.gz

  linux-cpp:
    name: C++ Binary ${{ matrix.config.os }}-${{ matrix.config.version }}
    runs-on: ["self-hosted", "X64", "Linux"]
    needs: source
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu, version: "18.04" }
          - { os: ubuntu, version: "22.04" }
          - { os: centos, version: "7" }
    env:
      UBUNTU: ${{ matrix.config.version }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: assignUser/arrow
          ref: c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b
          submodules: recursive

      - name: Modify version
        shell: bash
        run: |
          cd arrow/r
          sed -i.bak -E -e \
            's/(^Version: )([0-9]+\.[0-9]+\.[0-9]+).*$/\1${{ needs.source.outputs.pkg_version }}/' \
            DESCRIPTION
          head DESCRIPTION
          rm -f DESCRIPTION.bak
          cp ../dev/tasks/homebrew-formulae/autobrew/apache-arrow.rb tools/apache-arrow.rb
          
          # Pin the git commit in the formula to match
          cd tools
          if [ "true" == "true" ]; then 
            sed -i.bak -E -e 's/apache\/arrow.git"$/assignUser\/arrow.git", :revision => "'"c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b"'"/' apache-arrow.rb
          else
            sed -i.bak -E -e 's/arrow.git"$/arrow.git", :revision => "'"c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b"'"/' apache-arrow.rb
          fi
          rm -f apache-arrow.rb.bak

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          cache: 'pip'
          python-version: 3.8
      - name: Install Archery
        shell: bash
        run: pip install -e arrow/dev/archery[all]

      - name: Build libarrow
        shell: bash
        env:
          UBUNTU: ${{ matrix.config.version}}
        run: |
          sudo sysctl -w kernel.core_pattern="core.%e.%p"
          ulimit -c unlimited
          archery docker run  ${{ matrix.config.os}}-cpp-static
      - name: Bundle libarrow
        shell: bash
        env:
          PKG_FILE: arrow-${{ needs.source.outputs.pkg_version }}.zip
          VERSION: ${{ needs.source.outputs.pkg_version }}
        run: |
          cd arrow/r/libarrow/dist
          # These files were created by the docker user so we have to sudo to get them
          sudo -E zip -r $PKG_FILE lib/ include/
          
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-lib__libarrow__bin__${{ matrix.config.os}}-${{ matrix.config.version}}
          path: arrow/r/libarrow/dist/arrow-*.zip

  windows-cpp:
    name: C++ Binary Windows RTools (40 only)
    needs: source
    runs-on: ["self-hosted", "X64", "Windows"]
    steps:
      - run: git config --global core.autocrlf false
      - name: Checkout Arrow
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          path: arrow
          repository: assignUser/arrow
          ref: c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b
          submodules: recursive

      - name: Modify version
        shell: bash
        run: |
          cd arrow/r
          sed -i.bak -E -e \
            's/(^Version: )([0-9]+\.[0-9]+\.[0-9]+).*$/\1${{ needs.source.outputs.pkg_version }}/' \
            DESCRIPTION
          head DESCRIPTION
          rm -f DESCRIPTION.bak
          cp ../dev/tasks/homebrew-formulae/autobrew/apache-arrow.rb tools/apache-arrow.rb
          
          # Pin the git commit in the formula to match
          cd tools
          if [ "true" == "true" ]; then 
            sed -i.bak -E -e 's/apache\/arrow.git"$/assignUser\/arrow.git", :revision => "'"c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b"'"/' apache-arrow.rb
          else
            sed -i.bak -E -e 's/arrow.git"$/arrow.git", :revision => "'"c8d3f576b0fc61fb25fea20ee1aac173bf3a9a1b"'"/' apache-arrow.rb
          fi
          rm -f apache-arrow.rb.bak


      - uses: r-lib/actions/setup-r@v2
        with:
          rtools-version: 40
          r-version: "4.0"
          Ncpus: 2

      - name: Build Arrow C++ with rtools40
        shell: bash
        env:
          ARROW_HOME: "arrow"
        run: arrow/ci/scripts/r_windows_build.sh

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-lib__libarrow__bin__windows
          path: build/arrow-*.zip 

  r-packages:
    needs: [source, windows-cpp]
    name: ${{ matrix.platform }} ${{ matrix.r_version.r }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ["self-hosted", "X64", "Windows"]
          # This is newer than what CRAN builds on, but Travis is no longer an option for us, so...
          # - macos-10.15
          # - devops-managed # No M1 until the runner application runs native
        r_version:
          - { rtools: 40, r: "4.1" }
          - { rtools: 42, r: "4.2.0" }
    steps:
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r_version.r }}
          rtools-version: ${{ matrix.r_version.rtools }}
          Ncpus: 2
      - name: Setup local repo
        shell: bash
        run: mkdir repo 
      - name: Get windows binary
        uses: actions/download-artifact@v3
        with:
          name: r-lib__libarrow__bin__windows
          path: repo/libarrow/bin/windows
      - name: Get src pkg
        uses: actions/download-artifact@v3
        with:
          name: r-pkg__src__contrib
          path: repo/src/contrib
      - name: Update repo index
        shell: Rscript {0}
        run: |
          # getwd() is necessary as this macro is used within jobs using a docker container
          tools::write_PACKAGES(file.path(getwd(), "/repo/src/contrib", fsep = "/"), type = "source", verbose = TRUE)
      - run: ls -R repo

      - name: Build Binary
        id: build
        shell: Rscript {0}
        run: |
          on_windows <- tolower(Sys.info()[["sysname"]]) == "windows"

          # Install dependencies by installing (yesterday's) binary, then removing it
          install.packages(c("arrow", "cpp11"),
            type = "binary",
            repos = c("https://nightlies.apache.org/arrow/r", "https://cloud.r-project.org")
          )
          remove.packages("arrow")

          # Setup local repo
          dev_repo <- paste0(
            ifelse(on_windows, "file:", "file://"),
            getwd(),
            "/repo")
          
          # This is necessary to use the local folder as a repo in both
          # install_arrow & tools/*libs.R
          options(arrow.dev_repo = dev_repo)
          
          # Build
          Sys.setenv(MAKEFLAGS = paste0("-j", parallel::detectCores()))
          INSTALL_opts <- "--build"
          if (!on_windows) {
            # Windows doesn't support the --strip arg
            INSTALL_opts <- c(INSTALL_opts, "--strip")
          }

         
          install.packages(
            "arrow",
            type = "source",
            repos = dev_repo,
            INSTALL_opts = INSTALL_opts
          )

          # Test
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))

          # encode contrib.url for artifact name
          cmd <- paste0(
            "::set-output name=path::", 
            gsub(
              "/", "__",
              contrib.url("", type = "binary")
            ),
            "\n"
          )
          cat(cmd)

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-pkg${{ steps.build.outputs.path }}
          path: arrow_*

  test-linux-binary:
    needs: [source, linux-cpp]
    name: Test binary ${{ matrix.image }}
    runs-on: ["self-hosted", "X64", "Linux"]
    container: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - "rhub/ubuntu-gcc-release" # ubuntu-20.04 (focal)
          - "rstudio/r-base:4.1-bionic"
          - "rstudio/r-base:4.2-centos7"
          - "rocker/r-ver:3.6.3" # for debian:buster (10)
          - "rocker/r-ver" # ubuntu-20.04
          - "rhub/fedora-clang-devel" # tests distro-map.csv, mapped to ubuntu-18.04
          - "rocker/r-ubuntu:22.04" # tests openssl3 compatibility
    steps:
      - name: Install system requirements
        shell: bash
        run: |
          if [ "`which dnf`" ]; then
            dnf install -y libcurl-devel openssl-devel
          elif [ "`which yum`" ]; then
            yum install -y libcurl-devel openssl-devel
          elif [ "`which zypper`" ]; then
            zypper install -y libcurl-devel libopenssl-devel
          else
            apt-get update
            apt-get install -y libcurl4-openssl-dev libssl-dev
          fi

          # Add R-devel to PATH
          echo "/opt/R-devel/bin" >> $GITHUB_PATH
      - name: Setup local repo
        shell: bash
        run: mkdir repo 
      - name: Get ubuntu-18.04 binary
        uses: actions/download-artifact@v3
        with:
          name: r-lib__libarrow__bin__ubuntu-18.04
          path: repo/libarrow/bin/ubuntu-18.04
      - name: Get ubuntu-22.04 binary
        uses: actions/download-artifact@v3
        with:
          name: r-lib__libarrow__bin__ubuntu-22.04
          path: repo/libarrow/bin/ubuntu-22.04
      - name: Get centos-7 binary
        uses: actions/download-artifact@v3
        with:
          name: r-lib__libarrow__bin__centos-7
          path: repo/libarrow/bin/centos-7
      - name: Get src pkg
        uses: actions/download-artifact@v3
        with:
          name: r-pkg__src__contrib
          path: repo/src/contrib
      - name: Update repo index
        shell: Rscript {0}
        run: |
          # getwd() is necessary as this macro is used within jobs using a docker container
          tools::write_PACKAGES(file.path(getwd(), "/repo/src/contrib", fsep = "/"), type = "source", verbose = TRUE)
      - run: ls -R repo

      - name: Set dev repo
        shell: bash
        run: |
          # It is important to use pwd here as this happens inside a container so the 
          # normal github.workspace path is wrong.
          echo "options(arrow.dev_repo = 'file://$(pwd)/repo')" >> ~/.Rprofile
      - name: Install arrow from our repo
        env:
          LIBARROW_BUILD: "FALSE"
          LIBARROW_BINARY: "TRUE"
        shell: Rscript {0}
        run: |
          source("https://raw.githubusercontent.com/apache/arrow/master/ci/etc/rprofile")
          
          install.packages(
            "arrow",
            repos = c(getOption("arrow.dev_repo"), "https://cloud.r-project.org"),
            verbose = TRUE
          )
          
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))

          # Our Version should always be > CRAN so we would detect a CRAN version here.
          stopifnot(packageVersion("arrow") == "${{needs.source.outputs.pkg_version}}")


  test-source:
    needs: source
    name: Test linux source build
    runs-on: ["self-hosted", "X64", "Linux"]
    steps:
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          install-r: false
      - name: Setup local repo
        shell: bash
        run: mkdir repo 
      - name: Get src pkg
        uses: actions/download-artifact@v3
        with:
          name: r-pkg__src__contrib
          path: repo/src/contrib
      - name: Update repo index
        shell: Rscript {0}
        run: |
          # getwd() is necessary as this macro is used within jobs using a docker container
          tools::write_PACKAGES(file.path(getwd(), "/repo/src/contrib", fsep = "/"), type = "source", verbose = TRUE)
      - run: ls -R repo

      - name: Set dev repo
        shell: bash
        run: |
          echo "options(arrow.dev_repo = 'file://$(pwd)/repo')" >> ~/.Rprofile
      - name: Install arrow from nightly repo
        env:
          # Test source build so be sure not to download a binary
          LIBARROW_BINARY: "FALSE"
        shell: Rscript {0}
        run: |
          source("https://raw.githubusercontent.com/apache/arrow/master/ci/etc/rprofile")
          
          install.packages(
            "arrow",
            repos = c(getOption("arrow.dev_repo"), "https://cloud.r-project.org"),
            verbose = TRUE
          )
          
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))

          # Our Version should always be > CRAN so we would detect a CRAN version here.
          stopifnot(packageVersion("arrow") == "${{needs.source.outputs.pkg_version}}")


      - name: Retry with verbosity if that failed
        if: failure()
        env:
          LIBARROW_BINARY: "FALSE"
          ARROW_R_DEV: "TRUE"
        run: |
          source("https://raw.githubusercontent.com/apache/arrow/master/ci/etc/rprofile")
          
          install.packages(
            "arrow",
            repos = c(getOption("arrow.dev_repo"), "https://cloud.r-project.org"),
            verbose = TRUE
          )
          
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))

          # Our Version should always be > CRAN so we would detect a CRAN version here.
          stopifnot(packageVersion("arrow") == "${{needs.source.outputs.pkg_version}}")


          
